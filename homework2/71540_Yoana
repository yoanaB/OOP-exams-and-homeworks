#ifndef FIGURE_H
#define FIGURE_H

struct Dot
{
	Dot();
	Dot(double, double);
	double getX() const;
	double getY() const;
	void setX(double);
	void setY(double);
	void print() const;
	void read();
	Dot& operator=(const Dot&);
	bool operator==(const Dot&);
	double x, y;
};

class Figure
{
public:
	virtual double area() const = 0;
	virtual double perim() const = 0;
	virtual Dot& getCenter() const = 0;
};

class Triangle : public Figure
{
public:
	Triangle(Dot a, Dot b, Dot c);
	double getFirstCoordX() const;
	double getFirstCoordY() const;
	double getSecondCoordX() const;
	double getSecondCoordY() const;
	double getThirdCoordX() const;
	double getThirdCoordY() const;
	virtual double area() const;
	virtual double perim() const;
	virtual Dot& getCenter() const;
	virtual bool operator==(const Triangle& other);
private:
	Dot a[3];
};

class Rectangle : public Figure
{
public:
	Rectangle(Dot, Dot);
	double getFirstCoordX() const;
	double getSecondCoordX() const;
	double getFirstCoordY() const;
	double getSecondCoordY() const;
	double getWidth() const;
	double getHeight() const;
	virtual double area() const;
	virtual double perim() const;
	virtual Dot& getCenter() const;
	virtual bool operator==(const Rectangle& other);
private:
	Dot a[2];
};

class Circle : public Figure
{
public:
	Circle(Dot, double);
	double getRadius() const;
	virtual double area() const;
	virtual double perim() const;
	virtual Dot& getCenter() const;
	virtual bool operator==(const Circle& other);
private:
	Dot &c;
	double r;
};

#endif
